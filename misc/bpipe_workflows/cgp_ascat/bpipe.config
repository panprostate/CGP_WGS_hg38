//read config file
def config = new ConfigSlurper().parse(new File('cgp_ascat.prm').toURL())
props = config.toProperties()

LSF_Q=props.LSF_Q
LSF_MEMORY=props.LSF_MEMORY
LSF_ARRAY_START=props.LSF_ARRAY_START
LSF_ARRAY_END=props.LSF_ARRAY_END

LSF_JOB_NAME=props.LSF_JOB_NAME
THREADS=props.THREADS

LSF_Q_ALLELE_COUNT=props.LSF_Q_ALLELE_COUNT
LSF_MEMORY_ALLELE_COUNT=props.LSF_MEMORY_ALLELE_COUNT
LSF_ARRAY_START_ALLELE_COUNT=props.LSF_ARRAY_START_ALLELE_COUNT
LSF_ARRAY_END_ALLELE_COUNT=props.LSF_ARRAY_END_ALLELE_COUNT
LSF_THREADS_ALLELE_COUNT=props.LSF_THREADS_ALLELE_COUNT

LSF_Q_ASCAT=props.LSF_Q_ASCAT
LSF_MEMORY_ASCAT=props.LSF_MEMORY_ASCAT
LSF_ARRAY_START_ASCAT=props.LSF_ARRAY_START_ASCAT
LSF_ARRAY_END_ASCAT=props.LSF_ARRAY_END_ASCAT
LSF_THREADS_ASCAT=props.LSF_THREADS_ASCAT

LSF_Q_FINALISE=props.LSF_Q_FINALISE
LSF_MEMORY_FINALISE=props.LSF_MEMORY_FINALISE
LSF_ARRAY_START_FINALISE=props.LSF_ARRAY_START_FINALISE
LSF_ARRAY_END_FINALISE=props.LSF_ARRAY_END_FINALISE
LSF_THREADS_FINALISE=props.LSF_THREADS_FINALISE

config = new ConfigSlurper().parse(new File('cgp_resultloader.prm').toURL())
props = config.toProperties()

LSF_Q_RESULT=props.LSF_Q_RESULT
LSF_MEMORY_RESULT=props.LSF_MEMORY_RESULT
LSF_RESULT_ARRAY_START=props.LSF_RESULT_ARRAY_START
LSF_RESULT_ARRAY_END=props.LSF_RESULT_ARRAY_END
LSF_RESULT_JOB_NAME=props.LSF_RESULT_JOB_NAME
LSF_RESULT_THREADS=props.LSF_RESULT_THREADS
LSF_RESULT_PRIORITY=props.LSF_RESULT_PRIORITY
LSF_RESULT_NFS_TOKEN=props.LSF_RESULT_NFS_TOKEN

def JOBID = System.getenv('LSB_JOBID');

executor="lsf"
procs="$THREADS"

lsf_request_options=" -P analysis-cgp -q $LSF_Q -R'select[mem>$LSF_MEMORY]  span[hosts=1] rusage[mem=$LSF_MEMORY]' -M$LSF_MEMORY -oo ${LSF_JOB_NAME}_default.%I.canPipe.log -J ${LSF_JOB_NAME}_default_${JOBID}'[$LSF_ARRAY_START-$LSF_ARRAY_END]'"

commands {
	lsf_ALLELE_COUNT {
		procs="$LSF_THREADS_ALLELE_COUNT"
		lsf_request_options=" -P analysis-cgp -q $LSF_Q_ALLELE_COUNT -R'select[mem>$LSF_MEMORY_ALLELE_COUNT]  span[hosts=1] rusage[mem=$LSF_MEMORY_ALLELE_COUNT]' -M$LSF_MEMORY_ALLELE_COUNT -oo ${LSF_JOB_NAME}_count.%I.canPipe.log -J ${LSF_JOB_NAME}_ALLELE_COUNT_${JOBID}'[$LSF_ARRAY_START_ALLELE_COUNT-$LSF_ARRAY_END_ALLELE_COUNT]'"
	}
	lsf_ASCAT {
		procs="$LSF_THREADS_ASCAT"
		lsf_request_options=" -P analysis-cgp -q $LSF_Q_ASCAT -R'select[mem>$LSF_MEMORY_ASCAT]  span[hosts=1] rusage[mem=$LSF_MEMORY_ASCAT]' -M$LSF_MEMORY_ASCAT -oo ${LSF_JOB_NAME}_ascat.%I.canPipe.log -J ${LSF_JOB_NAME}_ASCAT_${JOBID}'[$LSF_ARRAY_START_ASCAT-$LSF_ARRAY_END_ASCAT]'"
	}
	lsf_ASCAT_RERUN {
		procs="$LSF_THREADS_ASCAT"
		lsf_request_options=" -P analysis-cgp -q $LSF_Q_ASCAT -sp 54 -R'select[mem>$LSF_MEMORY_ASCAT]  span[hosts=1] rusage[mem=$LSF_MEMORY_ASCAT]' -M$LSF_MEMORY_ASCAT -oo ${LSF_JOB_NAME}_ascat.%I.canPipe.log -J ${LSF_JOB_NAME}_ASCAT_${JOBID}'[$LSF_ARRAY_START_ASCAT-$LSF_ARRAY_END_ASCAT]'"
	}
	lsf_ASCAT_NOWORK { // this is a special case, many values have been hard coded
		procs="1"
		lsf_request_options=" -P analysis-cgp -q small -R'select[mem>100]  span[hosts=1] rusage[mem=100]' -M100 -oo ${LSF_JOB_NAME}_ascatnowork.%I.canPipe.log -J ${LSF_JOB_NAME}_ASCATNOWORK_${JOBID}'[1]'"
	}
	lsf_FINALISE {
		procs="$LSF_THREADS_FINALISE"
		lsf_request_options=" -P analysis-cgp -q $LSF_Q_FINALISE -sp 54 -R'select[mem>$LSF_MEMORY_FINALISE]  span[hosts=1] rusage[mem=$LSF_MEMORY_FINALISE]' -M$LSF_MEMORY_FINALISE -oo ${LSF_JOB_NAME}_finalise.%I.canPipe.log -J ${LSF_JOB_NAME}_FINALISE_${JOBID}'[$LSF_ARRAY_START_FINALISE-$LSF_ARRAY_END_FINALISE]'"
	}
	lsf_loadresults {
    procs="$LSF_RESULT_THREADS"
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_RESULT -sp $LSF_RESULT_PRIORITY -R'select[casm_cgpirods>=$LSF_RESULT_NFS_TOKEN && mem>$LSF_MEMORY_RESULT] order[!slots] span[hosts=1] rusage[casm_cgpirods=$LSF_RESULT_NFS_TOKEN]' -R'rusage[mem=$LSF_MEMORY_RESULT]' -M$LSF_MEMORY_RESULT -oo resultloader.%I.canPipe.log -J ${LSF_RESULT_JOB_NAME}_RESULT_${JOBID}'[$LSF_RESULT_ARRAY_START-$LSF_RESULT_ARRAY_END]'"
	}
}
