//load external_bamstats prm file (for JOB_NAME)
def config = new ConfigSlurper().parse(new File('cgp_external_map_bamstats.prm').toURL())
props = config.toProperties()

LSF_JOB_NAME=props.LSF_JOB_NAME


//load staging prm file
config = new ConfigSlurper().parse(new File('cgp_staging.prm').toURL())
props = config.toProperties()

LSF_JOB_NAME_STAGE=props.LSF_JOB_NAME
LSF_Q_STAGE=props.LSF_Q_STAGE
LSF_MEMORY_STAGE=props.LSF_MEMORY_STAGE
LSF_ARRAY_START_STAGE=props.LSF_ARRAY_START_STAGE
LSF_ARRAY_END_STAGE=props.LSF_ARRAY_END_STAGE
LSF_THREADS_STAGE=props.LSF_THREADS_STAGE
LSF_PRIORITY_STAGE =props.LSF_PRIORITY_STAGE
LSF_NFS_TOKEN=props.LSF_NFS_TOKEN


//load biobambam prm file
config = new ConfigSlurper().parse(new File('cgp_biobambam.prm').toURL())
props = config.toProperties()

LSF_JOB_NAME_BIOBAMBAM=props.LSF_JOB_NAME

LSF_Q_BAMCOLLATE2=props.LSF_Q_BAMCOLLATE2
LSF_MEMORY_BAMCOLLATE2=props.LSF_MEMORY_BAMCOLLATE2
LSF_ARRAY_START_BAMCOLLATE2=props.LSF_ARRAY_START_BAMCOLLATE2
LSF_ARRAY_END_BAMCOLLATE2=props.LSF_ARRAY_END_BAMCOLLATE2
LSF_THREADS_BAMCOLLATE2=props.LSF_THREADS_BAMCOLLATE2


//load cgp_reheadcram config
config = new ConfigSlurper().parse(new File('cgp_reheadcram.prm').toURL())
props = config.toProperties()

LSF_JOB_NAME_REHEADCRAM=props.LSF_JOB_NAME
LSF_MEMORY_REHEADCRAM=props.LSF_MEMORY_REHEADCRAM
LSF_Q_REHEADCRAM=props.LSF_Q_REHEADCRAM


//load cgp_bwamem config
config = new ConfigSlurper().parse(new File('cgp_bwamem.prm').toURL())
props = config.toProperties()

LSF_JOB_NAME_BWAMEM=props.LSF_JOB_NAME
LSF_Q_SETUP_SPLIT=props.LSF_Q_SETUP_SPLIT
LSF_MEMORY_SETUP_SPLIT=props.LSF_MEMORY_SETUP_SPLIT
LSF_ARRAY_START_SETUP_SPLIT=props.LSF_ARRAY_START_SETUP_SPLIT
LSF_ARRAY_END_SETUP_SPLIT=props.LSF_ARRAY_END_SETUP_SPLIT
LSF_THREADS_SETUP_SPLIT=props.LSF_THREADS_SETUP_SPLIT

LSF_Q_BWAMEM=props.LSF_Q_BWAMEM
LSF_MEMORY_BWAMEM=props.LSF_MEMORY_BWAMEM
LSF_ARRAY_START_BWAMEM=props.LSF_ARRAY_START_BWAMEM
LSF_ARRAY_END_BWAMEM=props.LSF_ARRAY_END_BWAMEM
LSF_THREADS_BWAMEM=props.LSF_THREADS_BWAMEM

LSF_Q_MARK=props.LSF_Q_MARK
LSF_MEMORY_MARK=props.LSF_MEMORY_MARK
LSF_ARRAY_START_MARK=props.LSF_ARRAY_START_MARK
LSF_ARRAY_END_MARK=props.LSF_ARRAY_END_MARK
LSF_THREADS_MARK=props.LSF_THREADS_MARK

LSF_Q_STATS=props.LSF_Q_STATS
LSF_MEMORY_STATS=props.LSF_MEMORY_STATS
LSF_ARRAY_START_STATS=props.LSF_ARRAY_START_STATS
LSF_ARRAY_END_STATS=props.LSF_ARRAY_END_STATS
LSF_THREADS_STATS=props.LSF_THREADS_STATS

LSF_Q_MOVE=props.LSF_Q_MOVE
LSF_MEMORY_MOVE=props.LSF_MEMORY_MOVE
LSF_ARRAY_START_MOVE=props.LSF_ARRAY_START_MOVE
LSF_ARRAY_END_MOVE=props.LSF_ARRAY_END_MOVE
LSF_THREADS_MOVE=props.LSF_THREADS_MOVE

//load allele_count prm file
config = new ConfigSlurper().parse(new File('cgp_allele_count.prm').toURL())
props = config.toProperties()

LSF_JOB_NAME_ALLELE_COUNT=props.LSF_JOB_NAME
LSF_Q_ALLELE_COUNT_GENOTYPE=props.LSF_Q_ALLELE_COUNT_GENOTYPE
LSF_MEMORY_ALLELE_COUNT_GENOTYPE=props.LSF_MEMORY_ALLELE_COUNT_GENOTYPE
LSF_ARRAY_START_ALLELE_COUNT_GENOTYPE=props.LSF_ARRAY_START_ALLELE_COUNT_GENOTYPE
LSF_ARRAY_END_ALLELE_COUNT_GENOTYPE=props.LSF_ARRAY_END_ALLELE_COUNT_GENOTYPE
LSF_THREADS_ALLELE_COUNT_GENOTYPE=props.LSF_THREADS_ALLELE_COUNT_GENOTYPE

//load cgp_resultloader config
config = new ConfigSlurper().parse(new File('cgp_resultloader.prm').toURL())
props = config.toProperties()
LSF_Q_RESULT=props.LSF_Q_RESULT
LSF_MEMORY_RESULT=props.LSF_MEMORY_RESULT
LSF_RESULT_ARRAY_START=props.LSF_RESULT_ARRAY_START
LSF_RESULT_ARRAY_END=props.LSF_RESULT_ARRAY_END
LSF_RESULT_JOB_NAME=props.LSF_RESULT_JOB_NAME
LSF_RESULT_THREADS=props.LSF_RESULT_THREADS
LSF_RESULT_PRIORITY=props.LSF_RESULT_PRIORITY
LSF_RESULT_NFS_TOKEN=props.LSF_RESULT_NFS_TOKEN

def JOBID = System.getenv('LSB_JOBID');

executor="lsf"

commands {
    lsf_STAGE {
        procs="$LSF_THREADS_STAGE"
        lsf_request_options="  -P analysis-cgp -sp $LSF_PRIORITY_STAGE -q $LSF_Q_STAGE -R'select[casm_cgpirods>=$LSF_NFS_TOKEN && mem>$LSF_MEMORY_STAGE] order[!slots] span[hosts=1] rusage[casm_cgpirods=$LSF_NFS_TOKEN]' -R'rusage[mem=$LSF_MEMORY_STAGE]' -M$LSF_MEMORY_STAGE -oo ${LSF_JOB_NAME_STAGE}_STAGE.%I.canPipe.log -J ${LSF_JOB_NAME_STAGE}_STAGE_${JOBID}'[$LSF_ARRAY_START_STAGE-$LSF_ARRAY_END_STAGE]'"
    }
    lsf_BAMCOLLATE2 {
        procs="$LSF_THREADS_BAMCOLLATE2"
        lsf_request_options=" -P analysis-cgp -q $LSF_Q_BAMCOLLATE2 -R'select[mem>$LSF_MEMORY_BAMCOLLATE2]  span[hosts=1] rusage[mem=$LSF_MEMORY_BAMCOLLATE2]' -M$LSF_MEMORY_BAMCOLLATE2 -oo ${LSF_JOB_NAME_BIOBAMBAM}_BAMCOLLATE2.%I.canPipe.log -J ${LSF_JOB_NAME_BIOBAMBAM}_BAMCOLLATE2_${JOBID}'[$LSF_ARRAY_START_BAMCOLLATE2-$LSF_ARRAY_END_BAMCOLLATE2]'"
    }
    lsf_reheadcram_newhead {
        lsf_request_options=" -P analysis-cgp -q $LSF_Q_REHEADCRAM -R'select[mem>=$LSF_MEMORY_REHEADCRAM] rusage[mem=$LSF_MEMORY_REHEADCRAM]' -M$LSF_MEMORY_REHEADCRAM -oo ${LSF_JOB_NAME_REHEADCRAM}_reheadcram.%I.canPipe.log -J ${LSF_JOB_NAME_REHEADCRAM}_REHEADCRAM_${JOBID}"
    }
    lsf_SETUP_SPLIT {
        procs="$LSF_THREADS_SETUP_SPLIT"
        lsf_request_options=" -P analysis-cgp  -q $LSF_Q_SETUP_SPLIT -R'select[mem>=$LSF_MEMORY_SETUP_SPLIT] span[hosts=1] rusage[mem=$LSF_MEMORY_SETUP_SPLIT]' -M$LSF_MEMORY_SETUP_SPLIT -oo ${LSF_JOB_NAME_BWAMEM}_SETUP_SPLIT.%I.canPipe.log -J ${LSF_JOB_NAME_BWAMEM}_SETUP_SPLIT_${JOBID}'[$LSF_ARRAY_START_SETUP_SPLIT-$LSF_ARRAY_END_SETUP_SPLIT]'"
    }
    lsf_BWAMEM {
        procs="$LSF_THREADS_BWAMEM"
        lsf_request_options=" -P analysis-cgp  -q $LSF_Q_BWAMEM -R'select[mem>=$LSF_MEMORY_BWAMEM] span[hosts=1] rusage[mem=$LSF_MEMORY_BWAMEM]' -M$LSF_MEMORY_BWAMEM -oo ${LSF_JOB_NAME_BWAMEM}_BWAMEM.%I.canPipe.log -J ${LSF_JOB_NAME_BWAMEM}_BWAMEM_${JOBID}'[$LSF_ARRAY_START_BWAMEM-$LSF_ARRAY_END_BWAMEM]'"
    }
    lsf_MARK {
        procs="$LSF_THREADS_MARK"
        lsf_request_options=" -P analysis-cgp  -q $LSF_Q_MARK -R'select[mem>=$LSF_MEMORY_MARK] span[hosts=1] rusage[mem=$LSF_MEMORY_MARK]' -M$LSF_MEMORY_MARK -oo ${LSF_JOB_NAME_BWAMEM}_MARK.%I.canPipe.log -J ${LSF_JOB_NAME_BWAMEM}_MARK_${JOBID}'[$LSF_ARRAY_START_MARK-$LSF_ARRAY_END_MARK]'"
    }
    lsf_STATS {
        procs="$LSF_THREADS_STATS"
        lsf_request_options=" -P analysis-cgp  -q $LSF_Q_STATS -R'select[mem>=$LSF_MEMORY_STATS] span[hosts=1] rusage[mem=$LSF_MEMORY_STATS]' -M$LSF_MEMORY_STATS -oo ${LSF_JOB_NAME_BWAMEM}_STATS.%I.canPipe.log -J ${LSF_JOB_NAME_BWAMEM}_STATS_${JOBID}'[$LSF_ARRAY_START_STATS-$LSF_ARRAY_END_STATS]'"
    }
    lsf_MOVE {
        procs="$LSF_THREADS_MOVE"
        lsf_request_options=" -P analysis-cgp  -q $LSF_Q_MOVE -R'select[mem>=$LSF_MEMORY_MOVE] span[hosts=1] rusage[mem=$LSF_MEMORY_MOVE]' -M$LSF_MEMORY_MOVE -oo ${LSF_JOB_NAME_BWAMEM}_MOVE.%I.canPipe.log -J ${LSF_JOB_NAME_BWAMEM}_MOVE_${JOBID}'[$LSF_ARRAY_START_MOVE-$LSF_ARRAY_END_MOVE]'"
    }
    lsf_ALLELE_COUNT_GENOTYPE {
        procs="$LSF_THREADS_ALLELE_COUNT_GENOTYPE"
        lsf_request_options=" -P analysis-cgp -q $LSF_Q_ALLELE_COUNT_GENOTYPE -R'select[mem>$LSF_MEMORY_ALLELE_COUNT_GENOTYPE]  span[hosts=1] rusage[mem=$LSF_MEMORY_ALLELE_COUNT_GENOTYPE]' -M$LSF_MEMORY_ALLELE_COUNT_GENOTYPE -oo bp_bgzip_ALLELE_COUNT_GENOTYPE.%I.canPipe.log -J ${LSF_JOB_NAME_ALLELE_COUNT}_ALLELE_COUNT_GENOTYPE_${JOBID}'[$LSF_ARRAY_START_ALLELE_COUNT_GENOTYPE-$LSF_ARRAY_END_ALLELE_COUNT_GENOTYPE]'"
    }
    lsf_loadresults {
        procs="$LSF_RESULT_THREADS"
        lsf_request_options="  -P analysis-cgp -q $LSF_Q_RESULT -sp $LSF_RESULT_PRIORITY -R'select[casm_cgpirods>=$LSF_RESULT_NFS_TOKEN && mem>$LSF_MEMORY_RESULT] order[!slots] span[hosts=1] rusage[casm_cgpirods=$LSF_RESULT_NFS_TOKEN]' -R'rusage[mem=$LSF_MEMORY_RESULT]' -M$LSF_MEMORY_RESULT -oo resultloader.%I.canPipe.log -J ${LSF_RESULT_JOB_NAME}_RESULT_${JOBID}'[$LSF_RESULT_ARRAY_START-$LSF_RESULT_ARRAY_END]'"
    }
}
