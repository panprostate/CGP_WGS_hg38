def config = new ConfigSlurper().parse(new File('cgp_bammarkduplicates.prm').toURL())
props = config.toProperties()

LSF_Q_BAMMARKDUPS_STAGE=props.LSF_Q_BAMMARKDUPS_STAGE
LSF_MEMORY_BAMMARKDUPS_STAGE=props.LSF_MEMORY_BAMMARKDUPS_STAGE
LSF_ARRAY_START_BAMMARKDUPS_STAGE=props.LSF_ARRAY_START_BAMMARKDUPS_STAGE
LSF_ARRAY_END_BAMMARKDUPS_STAGE=props.LSF_ARRAY_END_BAMMARKDUPS_STAGE
LSF_THREADS_BAMMARKDUPS_STAGE=props.LSF_THREADS_BAMMARKDUPS_STAGE
LSF_PRIORITY_BAMMARKDUPS_STAGE=props.LSF_PRIORITY_BAMMARKDUPS_STAGE
LSF_NFS_TOKEN_BAMMARKDUPS_STAGE=props.LSF_NFS_TOKEN_BAMMARKDUPS_STAGE

LSF_Q_TOUCH=props.LSF_Q_TOUCH
LSF_MEMORY_TOUCH=props.LSF_MEMORY_TOUCH
LSF_ARRAY_START_TOUCH=props.LSF_ARRAY_START_TOUCH
LSF_ARRAY_END_TOUCH=props.LSF_ARRAY_END_TOUCH
LSF_THREADS_TOUCH=props.LSF_THREADS_TOUCH

LSF_Q_BAMMARKDUPS=props.LSF_Q_BAMMARKDUPS
LSF_MEMORY_BAMMARKDUPS=props.LSF_MEMORY_BAMMARKDUPS
LSF_ARRAY_END_BAMMARKDUPS=props.LSF_ARRAY_END_BAMMARKDUPS
LSF_ARRAY_START_BAMMARKDUPS=props.LSF_ARRAY_START_BAMMARKDUPS
LSF_THREADS_BAMMARKDUPS=props.LSF_THREADS_BAMMARKDUPS

LSF_Q_RESULT=props.LSF_Q_RESULT
LSF_MEMORY_RESULT=props.LSF_MEMORY_RESULT
LSF_RESULT_ARRAY_START=props.LSF_RESULT_ARRAY_START
LSF_RESULT_ARRAY_END=props.LSF_RESULT_ARRAY_END
LSF_RESULT_JOB_NAME=props.LSF_RESULT_JOB_NAME
LSF_RESULT_THREADS=props.LSF_RESULT_THREADS
LSF_RESULT_PRIORITY=props.LSF_RESULT_PRIORITY
LSF_RESULT_NFS_TOKEN=props.LSF_RESULT_NFS_TOKEN


LSF_JOB_NAME=props.LSF_JOB_NAME

config = new ConfigSlurper().parse(new File('cgp_coverage.prm').toURL())
props = config.toProperties()

LSF_CVG_THREADS=props.THREADS
LSF_Q_CVG=props.LSF_Q_coverage
LSF_MEMORY_CVG=props.LSF_MEMORY_coverage
LSF_CVG_JOB_NAME=props.LSF_JOB_NAME
LSF_CVG_ARRAY_START=props.LSF_ARRAY_START_coverage
LSF_CVG_ARRAY_END=props.LSF_ARRAY_END_coverage

config = new ConfigSlurper().parse(new File('cgp_baitappend.prm').toURL())
props = config.toProperties()

LSF_BAIT_THREADS=props.THREADS
LSF_Q_BAIT=props.LSF_Q_baitappend
LSF_MEMORY_BAIT=props.LSF_MEMORY_baitappend
LSF_BAIT_JOB_NAME=props.LSF_JOB_NAME
LSF_BAIT_ARRAY_START=props.LSF_ARRAY_START_baitappend
LSF_BAIT_ARRAY_END=props.LSF_ARRAY_END_baitappend

def JOBID = System.getenv('LSB_JOBID');

executor="lsf"

lsf_request_options=" -P bammarkduplicates_default  -q normal -R'select[mem>500] span[hosts=1] rusage[mem=500]' -M500 -oo bammarkduplicates_default.%I.canPipe.log -J bp_bammarkduplicates_default_${JOBID}'[1]'"

commands {
    lsf_bammarkduplicates_stage {
        lsf_request_options="  -P analysis-cgp -q $LSF_Q_BAMMARKDUPS_STAGE -sp $LSF_PRIORITY_BAMMARKDUPS_STAGE -R'select[casm_cgpirods>=$LSF_NFS_TOKEN_BAMMARKDUPS_STAGE && mem>$LSF_MEMORY_BAMMARKDUPS_STAGE] order[!slots] span[hosts=1]' -R'rusage[casm_cgpirods=$LSF_NFS_TOKEN_BAMMARKDUPS_STAGE]' -R'rusage[mem=$LSF_MEMORY_BAMMARKDUPS_STAGE]' -M$LSF_MEMORY_BAMMARKDUPS_STAGE -oo bammark_stage.%I.canPipe.log -J ${LSF_RESULT_JOB_NAME}_BAMMARKDUPS_STAGE_${JOBID}'[$LSF_ARRAY_START_BAMMARKDUPS_STAGE-$LSF_ARRAY_END_BAMMARKDUPS_STAGE]'"
    }
    lsf_bammarkduplicates_multi {
        procs="$LSF_THREADS_BAMMARKDUPS"
        lsf_request_options=" -P lsf_bammarkduplicates_multi  -q $LSF_Q_BAMMARKDUPS -R'select[mem>=$LSF_MEMORY_BAMMARKDUPS] span[hosts=1] rusage[mem=$LSF_MEMORY_BAMMARKDUPS]' -M$LSF_MEMORY_BAMMARKDUPS -oo lsf_bammarkduplicates_multi.%I.canPipe.log -J ${LSF_JOB_NAME}_BAMMARKDUPS_${JOBID}'[$LSF_ARRAY_START_BAMMARKDUPS-$LSF_ARRAY_END_BAMMARKDUPS]'"
    }
    lsf_loadresults {
        procs="$LSF_RESULT_THREADS"
        lsf_request_options="  -P analysis-cgp -q $LSF_Q_RESULT -sp $LSF_RESULT_PRIORITY -R'select[casm_cgpirods>=$LSF_RESULT_NFS_TOKEN && mem>$LSF_MEMORY_RESULT] order[!slots] span[hosts=1]' -R'rusage[casm_cgpirods=$LSF_RESULT_NFS_TOKEN]' -R'rusage[mem=$LSF_MEMORY_RESULT]' -M$LSF_MEMORY_RESULT -oo resultloader.%I.canPipe.log -J ${LSF_RESULT_JOB_NAME}_RESULT_${JOBID}'[$LSF_RESULT_ARRAY_START-$LSF_RESULT_ARRAY_END]'"
    }
    lsf_COVERAGE {
        procs="$LSF_CVG_THREADS"
        lsf_request_options=" -P analysis-cgp -n $LSF_CVG_THREADS -q $LSF_Q_CVG -R'select[mem>=$LSF_MEMORY_CVG]  span[hosts=1] rusage[mem=$LSF_MEMORY_CVG]' -M$LSF_MEMORY_CVG -oo ${LSF_CVG_JOB_NAME}_coverage.%I.canPipe.log -J ${LSF_CVG_JOB_NAME}_coverage_${JOBID}'[$LSF_CVG_ARRAY_START-$LSF_CVG_ARRAY_END]'"
    }
    lsf_BAITAPPEND {
        procs="$LSF_BAIT_THREADS"
        lsf_request_options=" -P analysis-cgp -n $LSF_BAIT_THREADS -q $LSF_Q_BAIT -R'select[mem>=$LSF_MEMORY_BAIT]  span[hosts=1] rusage[mem=$LSF_MEMORY_BAIT]' -M$LSF_MEMORY_BAIT -oo ${LSF_BAIT_JOB_NAME}_baitappend.%I.canPipe.log -J ${LSF_BAIT_JOB_NAME}_coverage_${JOBID}'[$LSF_BAIT_ARRAY_START-$LSF_BAIT_ARRAY_END]'"
    }
    lsf_TOUCH {
        procs="$LSF_THREADS_TOUCH"
        lsf_request_options="  -P analysis-cgp -q $LSF_Q_TOUCH -R'select[mem>$LSF_MEMORY_TOUCH] span[hosts=1] rusage[mem=$LSF_MEMORY_TOUCH]' -M$LSF_MEMORY_TOUCH -oo ${LSF_JOB_NAME}_TOUCH.%I.canPipe.log -J ${LSF_JOB_NAME}_TOUCH_${JOBID}'[$LSF_ARRAY_START_TOUCH-$LSF_ARRAY_END_TOUCH]'"
    }
}
