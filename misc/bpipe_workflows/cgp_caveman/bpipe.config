//read config file
def config = new ConfigSlurper().parse(new File('cgp_caveman.prm').toURL())
props = config.toProperties()


//get number of chromosomes for LSF job index
REFERENCE=props.REFERENCE
EXCLUDE_CONTIGS_FILE=props.EXCLUDE_CONTIGS_FILE

CONTIGS="grep -vFwcf ${EXCLUDE_CONTIGS_FILE} ${REFERENCE}.fai".execute().text.toInteger()

LIMIT_JOBS_MSTEP=props.LIMIT_JOBS_MSTEP
LIMIT_JOBS_ESTEP=props.LIMIT_JOBS_ESTEP

LSF_Q=props.LSF_Q
LSF_MEMORY=props.LSF_MEMORY
LSF_ARRAY_START=props.LSF_ARRAY_START
LSF_ARRAY_END=props.LSF_ARRAY_END
LSF_JOB_NAME=props.LSF_JOB_NAME
THREADS=props.THREADS

LSF_Q_SETUP=props.LSF_Q_SETUP
LSF_MEMORY_SETUP=props.LSF_MEMORY_SETUP
LSF_ARRAY_START_SETUP=props.LSF_ARRAY_START_SETUP
LSF_ARRAY_END_SETUP=props.LSF_ARRAY_END_SETUP
LSF_THREADS_SETUP=props.LSF_THREADS_SETUP

LSF_Q_SPLIT=props.LSF_Q_SPLIT
LSF_MEMORY_SPLIT=props.LSF_MEMORY_SPLIT
LSF_ARRAY_START_SPLIT=props.LSF_ARRAY_START_SPLIT
LSF_ARRAY_END_SPLIT=CONTIGS
LSF_THREADS_SPLIT=props.LSF_THREADS_SPLIT

LSF_Q_CONCAT=props.LSF_Q_CONCAT
LSF_MEMORY_CONCAT=props.LSF_MEMORY_CONCAT
LSF_ARRAY_START_CONCAT=props.LSF_ARRAY_START_CONCAT
LSF_ARRAY_END_CONCAT=props.LSF_ARRAY_END_CONCAT
LSF_THREADS_CONCAT=props.LSF_THREADS_CONCAT

LSF_Q_MSTEP=props.LSF_Q_MSTEP
LSF_MEMORY_MSTEP=props.LSF_MEMORY_MSTEP
LSF_ARRAY_START_MSTEP=props.LSF_ARRAY_START_MSTEP
LSF_ARRAY_END_MSTEP=LIMIT_JOBS_MSTEP
LSF_THREADS_MSTEP=props.LSF_THREADS_MSTEP

LSF_Q_MERGE=props.LSF_Q_MERGE
LSF_MEMORY_MERGE=props.LSF_MEMORY_MERGE
LSF_ARRAY_START_MERGE=props.LSF_ARRAY_START_MERGE
LSF_ARRAY_END_MERGE=props.LSF_ARRAY_END_MERGE
LSF_THREADS_MERGE=props.LSF_THREADS_MERGE

LSF_Q_ESTEP=props.LSF_Q_ESTEP
LSF_MEMORY_ESTEP=props.LSF_MEMORY_ESTEP
LSF_ARRAY_START_ESTEP=props.LSF_ARRAY_START_ESTEP
LSF_ARRAY_END_ESTEP=LIMIT_JOBS_ESTEP
LSF_THREADS_ESTEP=props.LSF_THREADS_ESTEP
LSF_ESTEP_PRIORITY=props.LSF_ESTEP_PRIORITY

LSF_Q_MERGE_RESULTS=props.LSF_Q_MERGE_RESULTS
LSF_MEMORY_MERGE_RESULTS=props.LSF_MEMORY_MERGE_RESULTS
LSF_ARRAY_START_MERGE_RESULTS=props.LSF_ARRAY_START_MERGE_RESULTS
LSF_ARRAY_END_MERGE_RESULTS=props.LSF_ARRAY_END_MERGE_RESULTS
LSF_THREADS_MERGE_RESULTS=props.LSF_THREADS_MERGE_RESULTS

config = new ConfigSlurper().parse(new File('cgp_resultloader.prm').toURL())
props = config.toProperties()

LSF_Q_RESULT=props.LSF_Q_RESULT
LSF_MEMORY_RESULT=props.LSF_MEMORY_RESULT
LSF_RESULT_ARRAY_START=props.LSF_RESULT_ARRAY_START
LSF_RESULT_ARRAY_END=props.LSF_RESULT_ARRAY_END
LSF_RESULT_JOB_NAME=props.LSF_RESULT_JOB_NAME
LSF_RESULT_THREADS=props.LSF_RESULT_THREADS
LSF_RESULT_PRIORITY=props.LSF_RESULT_PRIORITY
LSF_RESULT_NFS_TOKEN=props.LSF_RESULT_NFS_TOKEN

def JOBID = System.getenv('LSB_JOBID');

executor="lsf"
procs="2"
lsf_request_options="  -P analysis-cgp -q $LSF_Q -R'select[mem>$LSF_MEMORY]  span[hosts=1] rusage[mem=$LSF_MEMORY]' -M$LSF_MEMORY -oo default_step.%I.canPipe.log -J ${LSF_JOB_NAME}_default_${JOBID}'[$LSF_ARRAY_START-$LSF_ARRAY_END]'"
commands {

	lsf_SETUP {
		procs="$LSF_THREADS_SETUP"
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_SETUP -R'select[mem>$LSF_MEMORY_SETUP]  span[hosts=1] rusage[mem=$LSF_MEMORY_SETUP]' -M$LSF_MEMORY_SETUP -oo ${LSF_JOB_NAME}_SETUP.%I.canPipe.log -J ${LSF_JOB_NAME}_SETUP_${JOBID}'[$LSF_ARRAY_START_SETUP-$LSF_ARRAY_END_SETUP]'"
	}

	lsf_SPLIT {
		procs="$LSF_THREADS_SPLIT"
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_SPLIT -R'select[mem>$LSF_MEMORY_SPLIT]  span[hosts=1] rusage[mem=$LSF_MEMORY_SPLIT]' -M$LSF_MEMORY_SPLIT -oo ${LSF_JOB_NAME}_SPLIT.%I.canPipe.log -J ${LSF_JOB_NAME}_SPLIT_${JOBID}'[$LSF_ARRAY_START_SPLIT-$LSF_ARRAY_END_SPLIT]'"
	}

	lsf_CONCAT {
		procs="$LSF_THREADS_CONCAT"
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_CONCAT -R'select[mem>$LSF_MEMORY_CONCAT]  span[hosts=1] rusage[mem=$LSF_MEMORY_CONCAT]' -M$LSF_MEMORY_CONCAT -oo ${LSF_JOB_NAME}_CONCAT.%I.canPipe.log -J ${LSF_JOB_NAME}_CONCAT_${JOBID}'[$LSF_ARRAY_START_CONCAT-$LSF_ARRAY_END_CONCAT]'"
	}

	lsf_MSTEP {
		procs="$LSF_THREADS_MSTEP"
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_MSTEP -R'select[mem>$LSF_MEMORY_MSTEP]  span[hosts=1] rusage[mem=$LSF_MEMORY_MSTEP]' -M$LSF_MEMORY_MSTEP -oo ${LSF_JOB_NAME}_MSTEP.%I.canPipe.log -J ${LSF_JOB_NAME}_MSTEP_${JOBID}'[$LSF_ARRAY_START_MSTEP-$LSF_ARRAY_END_MSTEP]'"
	}

	lsf_MERGE {
		procs="$LSF_THREADS_MERGE"
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_MERGE -R'select[mem>$LSF_MEMORY_MERGE]  span[hosts=1] rusage[mem=$LSF_MEMORY_MERGE]' -M$LSF_MEMORY_MERGE -oo ${LSF_JOB_NAME}_MERGE.%I.canPipe.log -J ${LSF_JOB_NAME}_MERGE_${JOBID}'[$LSF_ARRAY_START_MERGE-$LSF_ARRAY_END_MERGE]'"
	}

	lsf_ESTEP {
		procs="$LSF_THREADS_ESTEP"
		lsf_request_options=" -sp $LSF_ESTEP_PRIORITY -P analysis-cgp -q $LSF_Q_ESTEP -R'select[mem>$LSF_MEMORY_ESTEP]  span[hosts=1] rusage[mem=$LSF_MEMORY_ESTEP]' -M$LSF_MEMORY_ESTEP -oo ${LSF_JOB_NAME}_ESTEP.%I.canPipe.log -J ${LSF_JOB_NAME}_ESTEP_${JOBID}'[$LSF_ARRAY_START_ESTEP-$LSF_ARRAY_END_ESTEP]'"
	}

	lsf_MERGE_RESULTS {
		procs="$LSF_THREADS_MERGE_RESULTS"
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_MERGE_RESULTS -R'select[mem>$LSF_MEMORY_MERGE_RESULTS]  span[hosts=1] rusage[mem=$LSF_MEMORY_MERGE_RESULTS]' -M$LSF_MEMORY_MERGE_RESULTS -oo ${LSF_JOB_NAME}_MERGE_RESULTS.%I.canPipe.log -J ${LSF_JOB_NAME}_MERGE_RESULTS_${JOBID}'[$LSF_ARRAY_START_MERGE_RESULTS-$LSF_ARRAY_END_MERGE_RESULTS]'"
	}

	lsf_loadresults {
    procs="$LSF_RESULT_THREADS"
		lsf_request_options=" -P analysis-cgp -q $LSF_Q_RESULT -sp $LSF_RESULT_PRIORITY -R'select[casm_cgpirods>=$LSF_RESULT_NFS_TOKEN && mem>$LSF_MEMORY_RESULT] order[!slots] span[hosts=1] rusage[casm_cgpirods=$LSF_RESULT_NFS_TOKEN]' -R'rusage[mem=$LSF_MEMORY_RESULT]' -M$LSF_MEMORY_RESULT -oo resultloader.%I.canPipe.log -J ${LSF_RESULT_JOB_NAME}_RESULT_${JOBID}'[$LSF_RESULT_ARRAY_START-$LSF_RESULT_ARRAY_END]'"
	}
}
