//load cgp_reheadcram config
def config = new ConfigSlurper().parse(new File('cgp_reheadcram.prm').toURL())
props = config.toProperties()

//assign values to parameters
LSF_JOB_NAME=props.LSF_JOB_NAME

LSF_Q_REHEADCRAM=props.LSF_Q_REHEADCRAM
LSF_MEMORY_REHEADCRAM=props.LSF_MEMORY_REHEADCRAM

LSF_Q_NEWHEAD_TO_BAM=props.LSF_Q_NEWHEAD_TO_BAM
LSF_MEMORY_NEWHEAD_TO_BAM=props.LSF_MEMORY_NEWHEAD_TO_BAM

def JOBID = System.getenv('LSB_JOBID');

//set HPC environment
executor="lsf"

lsf_request_options=" -P analysis-cgp -q normal -R'select[mem>500]  span[hosts=1] rusage[mem=500]' -M500 -oo default_step.%I.canPipe.log -J default_step_${JOBID}'[1]'"
// stage specific paramaters
commands {
	lsf_reheadcram_newhead {
		lsf_request_options=" -P analysis-cgp -q $LSF_Q_REHEADCRAM -R'select[mem>=$LSF_MEMORY_REHEADCRAM] span[hosts=1] rusage[mem=$LSF_MEMORY_REHEADCRAM]' -M$LSF_MEMORY_REHEADCRAM -oo ${LSF_JOB_NAME}_reheadcram.%I.canPipe.log -J ${LSF_JOB_NAME}_REHEADCRAM_${JOBID}"
	}
	lsf_reheadcram_newheadtobam {
		lsf_request_options=" -P analysis-cgp -q $LSF_Q_NEWHEAD_TO_BAM -R'select[mem>=$LSF_MEMORY_NEWHEAD_TO_BAM] span[hosts=1] rusage[mem=$LSF_MEMORY_NEWHEAD_TO_BAM]' -M$LSF_MEMORY_NEWHEAD_TO_BAM -oo ${LSF_JOB_NAME}_reheadcram.%I.canPipe.log -J ${LSF_JOB_NAME}_NEWHEAD_TO_BAM_${JOBID}"
	}
}

