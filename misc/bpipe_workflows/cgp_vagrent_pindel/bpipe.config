//read config file
def config = new ConfigSlurper().parse(new File('cgp_vagrent.prm').toURL())
props = config.toProperties()

LSF_Q=props.LSF_Q
LSF_MEMORY=props.LSF_MEMORY
LSF_ARRAY_START=props.LSF_ARRAY_START
LSF_ARRAY_END=props.LSF_ARRAY_END

LSF_JOB_NAME=props.LSF_JOB_NAME
THREADS=props.THREADS


LSF_Q_VAGRENT=props.LSF_Q_VAGRENT
LSF_MEMORY_VAGRENT=props.LSF_MEMORY_VAGRENT
LSF_ARRAY_START_VAGRENT=props.LSF_ARRAY_START_VAGRENT
LSF_ARRAY_END_VAGRENT=props.LSF_ARRAY_END_VAGRENT
LSF_THREADS_VAGRENT=props.LSF_THREADS_VAGRENT

config = new ConfigSlurper().parse(new File('cgp_splot.prm').toURL())
props = config.toProperties()

LSF_Q_SPLOT=props.LSF_Q_SPLOT
LSF_MEMORY_SPLOT=props.LSF_MEMORY_SPLOT
LSF_ARRAY_START_SPLOT=props.LSF_ARRAY_START_SPLOT
LSF_ARRAY_END_SPLOT=props.LSF_ARRAY_END_SPLOT
LSF_THREADS_SPLOT=props.LSF_THREADS_SPLOT

config = new ConfigSlurper().parse(new File('cgp_resultloader.prm').toURL())
props = config.toProperties()

LSF_Q_RESULT=props.LSF_Q_RESULT
LSF_MEMORY_RESULT=props.LSF_MEMORY_RESULT
LSF_RESULT_ARRAY_START=props.LSF_RESULT_ARRAY_START
LSF_RESULT_ARRAY_END=props.LSF_RESULT_ARRAY_END
LSF_RESULT_JOB_NAME=props.LSF_RESULT_JOB_NAME
LSF_RESULT_THREADS=props.LSF_RESULT_THREADS
LSF_RESULT_PRIORITY=props.LSF_RESULT_PRIORITY
LSF_RESULT_NFS_TOKEN=props.LSF_RESULT_NFS_TOKEN

def JOBID = System.getenv('LSB_JOBID');

executor="lsf"
procs="1"

lsf_request_options=" -P analysis-cgp  -q $LSF_Q -R'select[mem>$LSF_MEMORY] span[hosts=1] rusage[mem=$LSF_MEMORY]' -M$LSF_MEMORY -oo bp_${LSF_JOB_NAME}_default.%I.canPipe.log -J ${LSF_JOB_NAME}_default_${JOBID}'[$LSF_ARRAY_START-$LSF_ARRAY_END]'"

commands {
	lsf_VAGRENT {
		procs="$LSF_THREADS_VAGRENT"
		lsf_request_options=" -P analysis-cgp -q $LSF_Q_VAGRENT -R'select[mem>$LSF_MEMORY_VAGRENT] span[hosts=1] rusage[mem=$LSF_MEMORY_VAGRENT]' -M$LSF_MEMORY_VAGRENT -oo ${LSF_JOB_NAME}_vagrent.%I.canPipe.log -J ${LSF_JOB_NAME}_VAGRENT_${JOBID}'[$LSF_ARRAY_START_VAGRENT-$LSF_ARRAY_END_VAGRENT]'"
	}
  lsf_SPLOT {
    procs="$LSF_THREADS_SPLOT"
    lsf_request_options=" -sp 100 -P analysis-cgp -q $LSF_Q_SPLOT -R'select[mem>$LSF_MEMORY_SPLOT] span[hosts=1] rusage[mem=$LSF_MEMORY_SPLOT]' -M$LSF_MEMORY_SPLOT -oo ${LSF_JOB_NAME}_splot.%I.canPipe.log -J ${LSF_JOB_NAME}_SPLOT_${JOBID}'[$LSF_ARRAY_START_SPLOT-$LSF_ARRAY_END_SPLOT]'"
  }
  lsf_loadresults {
    procs="$LSF_RESULT_THREADS"
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_RESULT -sp $LSF_RESULT_PRIORITY -R'select[casm_cgpirods>=$LSF_RESULT_NFS_TOKEN && mem>$LSF_MEMORY_RESULT] order[!slots] span[hosts=1] rusage[casm_cgpirods=$LSF_RESULT_NFS_TOKEN]' -R'rusage[mem=$LSF_MEMORY_RESULT]' -M$LSF_MEMORY_RESULT -oo resultloader.%I.canPipe.log -J ${LSF_RESULT_JOB_NAME}_RESULT_${JOBID}'[$LSF_RESULT_ARRAY_START-$LSF_RESULT_ARRAY_END]'"
	}
}
