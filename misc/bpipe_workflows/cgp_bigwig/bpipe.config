//read config file
def config = new ConfigSlurper().parse(new File('cgp_bigwig.prm').toURL())
props = config.toProperties()

// set default parameters

LSF_Q=props.LSF_Q
LSF_MEMORY=props.LSF_MEMORY
LSF_JOB_NAME=props.LSF_JOB_NAME
THREADS=props.THREADS

//bamToBw catBw generateBw
LSF_THREADS_BAM_TO_BW=props.LSF_THREADS_BAM_TO_BW
LSF_Q_BAM_TO_BW=props.LSF_Q_BAM_TO_BW
LSF_MEMORY_BAM_TO_BW=props.LSF_MEMORY_BAM_TO_BW
LSF_ARRAY_START_BAM_TO_BW=props.LSF_ARRAY_START_BAM_TO_BW
LSF_ARRAY_END_BAM_TO_BW=props.LSF_ARRAY_END_BAM_TO_BW

LSF_Q_MERGE_BW=props.LSF_Q_MERGE_BW
LSF_MEMORY_MERGE_BW=props.LSF_MEMORY_MERGE_BW

LSF_Q_GEN_BW=props.LSF_Q_GEN_BW
LSF_MEMORY_GEN_BW=props.LSF_MEMORY_GEN_BW

LSF_Q_RENAME_BW=props.LSF_Q_RENAME_BW
LSF_MEMORY_RENAME_BW=props.LSF_MEMORY_RENAME_BW

config = new ConfigSlurper().parse(new File('cgp_resultloader.prm').toURL())
props = config.toProperties()

LSF_Q_RESULT=props.LSF_Q_RESULT
LSF_MEMORY_RESULT=props.LSF_MEMORY_RESULT
LSF_RESULT_ARRAY_START=props.LSF_RESULT_ARRAY_START
LSF_RESULT_ARRAY_END=props.LSF_RESULT_ARRAY_END
LSF_RESULT_JOB_NAME=props.LSF_RESULT_JOB_NAME
LSF_RESULT_THREADS=props.LSF_RESULT_THREADS
LSF_RESULT_PRIORITY=props.LSF_RESULT_PRIORITY
LSF_RESULT_NFS_TOKEN=props.LSF_RESULT_NFS_TOKEN

def JOBID = System.getenv('LSB_JOBID');

executor="lsf"
procs="1"


lsf_request_options=" -P analysis-cgp -q $LSF_Q -R'select[mem>500]  span[hosts=1] rusage[mem=500]' -M500 -oo default_step.%I.canPipe.log -J default_step_${JOBID}'[1]'"

commands {

	lsf_BAM_TO_BW {
    procs="$LSF_THREADS_BAM_TO_BW"
		lsf_request_options="  -sp 40 -P analysis-cgp -q $LSF_Q_BAM_TO_BW -R'select[mem>$LSF_MEMORY_BAM_TO_BW] span[hosts=1] rusage[mem=$LSF_MEMORY_BAM_TO_BW]' -M$LSF_MEMORY_BAM_TO_BW -oo ${LSF_JOB_NAME}_BAM_TO_BW.%I.canPipe.log -J ${LSF_JOB_NAME}_BAM_TO_BW_${JOBID}'[$LSF_ARRAY_START_BAM_TO_BW-$LSF_ARRAY_END_BAM_TO_BW]'"
	}

	lsf_MERGE_BW {
		lsf_request_options="  -sp 40 -P analysis-cgp -q $LSF_Q_MERGE_BW -R'select[mem>$LSF_MEMORY_MERGE_BW] span[hosts=1] rusage[mem=$LSF_MEMORY_MERGE_BW]' -M$LSF_MEMORY_MERGE_BW -oo ${LSF_JOB_NAME}_MERGE_BW.%I.canPipe.log -J ${LSF_JOB_NAME}_MERGE_BW_${JOBID}'[1]'"
	}

  lsf_GEN_BW {
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_GEN_BW -R'select[mem>$LSF_MEMORY_GEN_BW] span[hosts=1] rusage[mem=$LSF_MEMORY_GEN_BW]' -M$LSF_MEMORY_GEN_BW -oo ${LSF_JOB_NAME}_GEN_BW.%I.canPipe.log -J ${LSF_JOB_NAME}_GEN_BW_${JOBID}'[1]'"
	}
  lsf_RENAME_BW {
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_RENAME_BW -R'select[mem>$LSF_MEMORY_RENAME_BW] span[hosts=1] rusage[mem=$LSF_MEMORY_RENAME_BW]' -M$LSF_MEMORY_RENAME_BW -oo ${LSF_JOB_NAME}_RENAME_BW.%I.canPipe.log -J ${LSF_JOB_NAME}_RENAME_BW_${JOBID}'[1]'"
	}
  lsf_loadresults {
    procs="$LSF_RESULT_THREADS"
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_RESULT -sp $LSF_RESULT_PRIORITY -R'select[casm_cgpirods>=$LSF_RESULT_NFS_TOKEN && mem>$LSF_MEMORY_RESULT] order[!slots] span[hosts=1] rusage[casm_cgpirods=$LSF_RESULT_NFS_TOKEN]' -R'rusage[mem=$LSF_MEMORY_RESULT]' -M$LSF_MEMORY_RESULT -oo resultloader.%I.canPipe.log -J ${LSF_RESULT_JOB_NAME}_RESULT_${JOBID}'[$LSF_RESULT_ARRAY_START-$LSF_RESULT_ARRAY_END]'"
	}
}
