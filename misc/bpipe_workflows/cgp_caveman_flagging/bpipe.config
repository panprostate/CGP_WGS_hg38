// function to determine number of files/indices that will be generated by the split step.
def static vcfSplitCount(String vcfFile, float splitSize) {
  // embedded bsub to reduce load on oversubscribed hosts
  def countCmd = ['bash', 'bpipe_iBsub', 'yesterday', '2000', 'bp_prepFlagging', 'zgrep', '-cv', '^#', vcfFile];
  def proc = countCmd.execute();
  def outputStream = new StringBuffer();
  proc.waitForProcessOutput(outputStream, System.err);
  float count = Float.parseFloat(outputStream.toString().trim());
  float f_sections = count / splitSize;
  int sections = f_sections as int;
  if(f_sections > sections) {
    sections++;
  }
  if(sections==0) {
    sections = 1;
  }
  return sections;
}

//read config file
def config = new ConfigSlurper().parse(new File('cgp_caveman_flagging.prm').toURL())
props = config.toProperties()

LSF_Q=props.LSF_Q
LSF_MEMORY=props.LSF_MEMORY
LSF_ARRAY_START=props.LSF_ARRAY_START
LSF_ARRAY_END=props.LSF_ARRAY_END
LSF_JOB_NAME=props.LSF_JOB_NAME
THREADS=props.THREADS

LSF_Q_SPLIT=props.LSF_Q_SPLIT
LSF_MEMORY_SPLIT=props.LSF_MEMORY_SPLIT
LSF_ARRAY_START_SPLIT=props.LSF_ARRAY_START_SPLIT
LSF_ARRAY_END_SPLIT=props.LSF_ARRAY_END_SPLIT
LSF_THREADS_SPLIT=props.LSF_THREADS_SPLIT

LSF_Q_FLAG=props.LSF_Q_FLAG
LSF_MEMORY_FLAG=props.LSF_MEMORY_FLAG
LSF_ARRAY_START_FLAG=props.LSF_ARRAY_START_FLAG
LSF_ARRAY_END_FLAG=props.LSF_ARRAY_END_FLAG
LSF_THREADS_FLAG=props.LSF_THREADS_FLAG

LSF_Q_MERGE=props.LSF_Q_MERGE
LSF_MEMORY_MERGE=props.LSF_MEMORY_MERGE
LSF_ARRAY_START_MERGE=props.LSF_ARRAY_START_MERGE
LSF_ARRAY_END_MERGE=props.LSF_ARRAY_END_MERGE
LSF_THREADS_MERGE=props.LSF_THREADS_MERGE

LSF_ARRAY_END_FLAG = vcfSplitCount("${props.TUM_STAGE}/${props.FIELD_VAL}.caveman_c.vcf.gz", Float.parseFloat(props.SPLIT_LINE_COUNT));

config = new ConfigSlurper().parse(new File('cgp_resultloader.prm').toURL())
props = config.toProperties()

LSF_Q_RESULT=props.LSF_Q_RESULT
LSF_MEMORY_RESULT=props.LSF_MEMORY_RESULT
LSF_RESULT_ARRAY_START=props.LSF_RESULT_ARRAY_START
LSF_RESULT_ARRAY_END=props.LSF_RESULT_ARRAY_END
LSF_RESULT_JOB_NAME=props.LSF_RESULT_JOB_NAME
LSF_RESULT_THREADS=props.LSF_RESULT_THREADS
LSF_RESULT_PRIORITY=props.LSF_RESULT_PRIORITY
LSF_RESULT_NFS_TOKEN=props.LSF_RESULT_NFS_TOKEN

def JOBID = System.getenv('LSB_JOBID');
executor="lsf"
procs="1"
lsf_request_options="  -P analysis-cgp -q $LSF_Q -R'select[mem>$LSF_MEMORY]  span[hosts=1] rusage[mem=$LSF_MEMORY]' -M$LSF_MEMORY -oo default_step.%I.canPipe.log -J ${LSF_JOB_NAME}_default_${JOBID}'[$LSF_ARRAY_START-$LSF_ARRAY_END]'"
commands {
  lsf_cave_flag_split {
		procs="$LSF_THREADS_SPLIT"
    lsf_request_options="  -P analysis-cgp -q $LSF_Q_SPLIT -R'select[mem>$LSF_MEMORY_SPLIT]  span[hosts=1] rusage[mem=$LSF_MEMORY_SPLIT]' -M$LSF_MEMORY_SPLIT -oo ${LSF_JOB_NAME}_SPLIT.%I.canPipe.log -J ${LSF_JOB_NAME}_SPLIT_${JOBID}'[$LSF_ARRAY_START_SPLIT-$LSF_ARRAY_END_SPLIT]'"
  }
  lsf_cave_flag_flag {
		procs="$LSF_THREADS_FLAG"
    lsf_request_options="  -P analysis-cgp -q $LSF_Q_FLAG -R'select[mem>$LSF_MEMORY_FLAG]  span[hosts=1] rusage[mem=$LSF_MEMORY_FLAG]' -M$LSF_MEMORY_FLAG -oo ${LSF_JOB_NAME}_FLAG.%I.canPipe.log -J ${LSF_JOB_NAME}_FLAG_${JOBID}'[$LSF_ARRAY_START_FLAG-$LSF_ARRAY_END_FLAG]'"
  }
  lsf_cave_flag_merge {
		procs="$LSF_THREADS_MERGE"
    lsf_request_options="  -P analysis-cgp -q $LSF_Q_MERGE -R'select[mem>$LSF_MEMORY_MERGE]  span[hosts=1] rusage[mem=$LSF_MEMORY_MERGE]' -M$LSF_MEMORY_MERGE -oo ${LSF_JOB_NAME}_MERGE.%I.canPipe.log -J ${LSF_JOB_NAME}_MERGE_${JOBID}'[$LSF_ARRAY_START_MERGE-$LSF_ARRAY_END_MERGE]'"
  }

  lsf_loadresults {
    procs="$LSF_RESULT_THREADS"
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_RESULT -sp $LSF_RESULT_PRIORITY -R'select[casm_cgpirods>=$LSF_RESULT_NFS_TOKEN && mem>$LSF_MEMORY_RESULT] order[!slots] span[hosts=1] rusage[casm_cgpirods=$LSF_RESULT_NFS_TOKEN]' -R'rusage[mem=$LSF_MEMORY_RESULT]' -M$LSF_MEMORY_RESULT -oo resultloader.%I.canPipe.log -J ${LSF_RESULT_JOB_NAME}_RESULT_${JOBID}'[$LSF_RESULT_ARRAY_START-$LSF_RESULT_ARRAY_END]'"
	}
}
