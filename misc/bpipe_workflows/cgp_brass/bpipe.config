//load parameter file
def config = new ConfigSlurper().parse(new File('cgp_brass.prm').toURL())
props = config.toProperties()

//assign values to parameters as listed in .prm file

LSF_JOB_NAME=props.LSF_JOB_NAME

LSF_Q=props.LSF_Q
LSF_MEMORY=props.LSF_MEMORY
LSF_ARRAY_START=props.LSF_ARRAY_START
LSF_ARRAY_END=props.LSF_ARRAY_END
THREADS=props.THREADS

LSF_Q_INPUT=props.LSF_Q_INPUT
LSF_MEMORY_INPUT=props.LSF_MEMORY_INPUT
LSF_ARRAY_START_INPUT=props.LSF_ARRAY_START_INPUT
LSF_ARRAY_END_INPUT=props.LSF_ARRAY_END_INPUT
LSF_THREADS_INPUT=props.LSF_THREADS_INPUT

LSF_Q_COVER=props.LSF_Q_COVER
LSF_MEMORY_COVER=props.LSF_MEMORY_COVER
LSF_ARRAY_START_COVER=props.LSF_ARRAY_START_COVER
LSF_ARRAY_END_COVER=props.LSF_ARRAY_END_COVER
LSF_THREADS_COVER=props.LSF_THREADS_COVER

LSF_Q_THEREST=props.LSF_Q_THEREST
LSF_MEMORY_THEREST=props.LSF_MEMORY_THEREST
LSF_ARRAY_START_THEREST=props.LSF_ARRAY_START_THEREST
LSF_ARRAY_END_THEREST=props.LSF_ARRAY_END_THEREST
LSF_THREADS_THEREST=props.LSF_THREADS_THEREST

config = new ConfigSlurper().parse(new File('cgp_resultloader.prm').toURL())
props = config.toProperties()

LSF_Q_RESULT=props.LSF_Q_RESULT
LSF_MEMORY_RESULT=props.LSF_MEMORY_RESULT
LSF_RESULT_ARRAY_START=props.LSF_RESULT_ARRAY_START
LSF_RESULT_ARRAY_END=props.LSF_RESULT_ARRAY_END
LSF_RESULT_JOB_NAME=props.LSF_RESULT_JOB_NAME
LSF_RESULT_THREADS=props.LSF_RESULT_THREADS
LSF_RESULT_PRIORITY=props.LSF_RESULT_PRIORITY
LSF_RESULT_NFS_TOKEN=props.LSF_RESULT_NFS_TOKEN

def JOBID = System.getenv('LSB_JOBID');

//set HPC environment
executor="lsf"
procs="$THREADS"


//default options

lsf_request_options=" -P analysis-cgp -q $LSF_Q -R'select[mem>$LSF_MEMORY] span[hosts=1]  rusage[mem=$LSF_MEMORY]' -M$LSF_MEMORY -oo default_step.%I.canPipe.log -J ${LSF_JOB_NAME}_default_${JOBID}'[$LSF_ARRAY_START-$LSF_ARRAY_END]'"

// stage specific paramaters
commands {
	lsf_SAMP_STATS {
		procs=1
		lsf_request_options=" -P analysis-cgp  -q small -R'select[mem>=500] span[hosts=1] rusage[mem=500]' -M500 -oo ${LSF_JOB_NAME}_SAMP_STAT.%I.canPipe.log -J ${LSF_JOB_NAME}_SAMP_STAT_${JOBID}'[1]'"
	}
	lsf_INPUT {
		procs="$LSF_THREADS_INPUT"
		lsf_request_options=" -P analysis-cgp  -q $LSF_Q_INPUT -R'select[mem>=$LSF_MEMORY_INPUT] span[hosts=1] rusage[mem=$LSF_MEMORY_INPUT]' -M$LSF_MEMORY_INPUT -oo ${LSF_JOB_NAME}_INPUT.%I.canPipe.log -J ${LSF_JOB_NAME}_INPUT_${JOBID}'[$LSF_ARRAY_START_INPUT-$LSF_ARRAY_END_INPUT]'"
	}
  lsf_COVER {
		procs="$LSF_THREADS_COVER"
		lsf_request_options=" -P analysis-cgp  -q $LSF_Q_COVER -R'select[mem>=$LSF_MEMORY_COVER] span[hosts=1] rusage[mem=$LSF_MEMORY_COVER]' -M$LSF_MEMORY_COVER -oo ${LSF_JOB_NAME}_COVER.%I.canPipe.log -J ${LSF_JOB_NAME}_COVER_${JOBID}'[$LSF_ARRAY_START_COVER-$LSF_ARRAY_END_COVER]'"
	}
	lsf_THEREST {
		procs="$LSF_THREADS_THEREST"
		lsf_request_options=" -P analysis-cgp  -q $LSF_Q_THEREST -R'select[mem>=$LSF_MEMORY_THEREST] span[hosts=1] rusage[mem=$LSF_MEMORY_THEREST]' -M$LSF_MEMORY_THEREST -oo ${LSF_JOB_NAME}_THEREST.%I.canPipe.log -J ${LSF_JOB_NAME}_THEREST_${JOBID}'[$LSF_ARRAY_START_THEREST-$LSF_ARRAY_END_THEREST]'"
	}
  lsf_loadresults {
    procs="$LSF_RESULT_THREADS"
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_RESULT -sp $LSF_RESULT_PRIORITY -R'select[casm_cgpirods>=$LSF_RESULT_NFS_TOKEN && mem>$LSF_MEMORY_RESULT] order[!slots] span[hosts=1] rusage[casm_cgpirods=$LSF_RESULT_NFS_TOKEN]' -R'rusage[mem=$LSF_MEMORY_RESULT]' -M$LSF_MEMORY_RESULT -oo resultloader.%I.canPipe.log -J ${LSF_RESULT_JOB_NAME}_RESULT_${JOBID}'[$LSF_RESULT_ARRAY_START-$LSF_RESULT_ARRAY_END]'"
	}
}
