//read config file
def config = new ConfigSlurper().parse(new File('cgp_gridss.prm').toURL())
props = config.toProperties()

LSF_Q=props.LSF_Q
LSF_MEMORY=props.LSF_MEMORY
LSF_ARRAY_START=props.LSF_ARRAY_START
LSF_ARRAY_END=props.LSF_ARRAY_END

LSF_JOB_NAME=props.LSF_JOB_NAME
THREADS=props.THREADS

LSF_Q_PREPROCESS=props.LSF_Q_PREPROCESS
LSF_MEMORY_PREPROCESS=props.LSF_MEMORY_PREPROCESS
LSF_ARRAY_START_PREPROCESS=props.LSF_ARRAY_START_PREPROCESS
LSF_ARRAY_END_PREPROCESS=props.LSF_ARRAY_END_PREPROCESS
LSF_THREADS_PREPROCESS=props.LSF_THREADS_PREPROCESS
LSF_PREPROCESS_HIGHIO_TOKEN=props.LSF_PREPROCESS_HIGHIO_TOKEN

LSF_Q_ASSEMBLE=props.LSF_Q_ASSEMBLE
LSF_MEMORY_ASSEMBLE=props.LSF_MEMORY_ASSEMBLE
LSF_ARRAY_START_ASSEMBLE=props.LSF_ARRAY_START_ASSEMBLE
LSF_ARRAY_END_ASSEMBLE=props.LSF_ARRAY_END_ASSEMBLE
LSF_THREADS_ASSEMBLE=props.LSF_THREADS_ASSEMBLE

LSF_Q_CALL=props.LSF_Q_CALL
LSF_MEMORY_CALL=props.LSF_MEMORY_CALL
LSF_ARRAY_START_CALL=props.LSF_ARRAY_START_CALL
LSF_ARRAY_END_CALL=props.LSF_ARRAY_END_CALL
LSF_THREADS_CALL=props.LSF_THREADS_CALL

config = new ConfigSlurper().parse(new File('cgp_resultloader.prm').toURL())
props = config.toProperties()

LSF_Q_RESULT=props.LSF_Q_RESULT
LSF_MEMORY_RESULT=props.LSF_MEMORY_RESULT
LSF_RESULT_ARRAY_START=props.LSF_RESULT_ARRAY_START
LSF_RESULT_ARRAY_END=props.LSF_RESULT_ARRAY_END
LSF_RESULT_JOB_NAME=props.LSF_RESULT_JOB_NAME
LSF_RESULT_THREADS=props.LSF_RESULT_THREADS
LSF_RESULT_PRIORITY=props.LSF_RESULT_PRIORITY
LSF_RESULT_NFS_TOKEN=props.LSF_RESULT_NFS_TOKEN

def JOBID = System.getenv('LSB_JOBID');

executor="lsf"
procs="$THREADS"

lsf_request_options=" -P analysis-cgp -q $LSF_Q -R'select[mem>$LSF_MEMORY]  span[hosts=1] rusage[mem=$LSF_MEMORY]' -M$LSF_MEMORY -oo ${LSF_JOB_NAME}_default.%I.canPipe.log -J ${LSF_JOB_NAME}_default_${JOBID}'[$LSF_ARRAY_START-$LSF_ARRAY_END]'"

commands {
    lsf_PREPROCESS {
        procs="$LSF_THREADS_PREPROCESS"
        lsf_request_options=" -P analysis-cgp -q $LSF_Q_PREPROCESS -R'select[casm_highio>=$LSF_PREPROCESS_HIGHIO_TOKEN && mem>$LSF_MEMORY_PREPROCESS] order[!slots] span[hosts=1] rusage[casm_highio=$LSF_PREPROCESS_HIGHIO_TOKEN]' -R'rusage[mem=$LSF_MEMORY_PREPROCESS]' -M$LSF_MEMORY_PREPROCESS -oo ${LSF_JOB_NAME}_preprocess.%I.canPipe.log -J ${LSF_JOB_NAME}_PREPROCESS_${JOBID}'[$LSF_ARRAY_START_PREPROCESS-$LSF_ARRAY_END_PREPROCESS]'"
    }
    lsf_ASSEMBLE {
        procs="$LSF_THREADS_ASSEMBLE"
        lsf_request_options=" -P analysis-cgp -q $LSF_Q_ASSEMBLE -R'select[mem>$LSF_MEMORY_ASSEMBLE]  span[hosts=1] rusage[mem=$LSF_MEMORY_ASSEMBLE]' -M$LSF_MEMORY_ASSEMBLE -oo ${LSF_JOB_NAME}_assemble.%I.canPipe.log -J ${LSF_JOB_NAME}_ASSEMBLE_${JOBID}'[$LSF_ARRAY_START_ASSEMBLE-$LSF_ARRAY_END_ASSEMBLE]'"
    }
    lsf_CALL {
        procs="$LSF_THREADS_CALL"
        lsf_request_options=" -P analysis-cgp -q $LSF_Q_CALL -R'select[mem>$LSF_MEMORY_CALL]  span[hosts=1] rusage[mem=$LSF_MEMORY_CALL]' -M$LSF_MEMORY_CALL -oo ${LSF_JOB_NAME}_call.%I.canPipe.log -J ${LSF_JOB_NAME}_CALL_${JOBID}'[$LSF_ARRAY_START_CALL-$LSF_ARRAY_END_CALL]'"
    }
    lsf_loadresults {
        procs="$LSF_RESULT_THREADS"
        lsf_request_options="  -P analysis-cgp -q $LSF_Q_RESULT -sp $LSF_RESULT_PRIORITY -R'select[casm_cgpirods>=$LSF_RESULT_NFS_TOKEN && mem>$LSF_MEMORY_RESULT] order[!slots] span[hosts=1] rusage[casm_cgpirods=$LSF_RESULT_NFS_TOKEN]' -R'rusage[mem=$LSF_MEMORY_RESULT]' -M$LSF_MEMORY_RESULT -oo resultloader.%I.canPipe.log -J ${LSF_RESULT_JOB_NAME}_RESULT_${JOBID}'[$LSF_RESULT_ARRAY_START-$LSF_RESULT_ARRAY_END]'"
    }
}
