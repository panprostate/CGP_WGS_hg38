//load lane bam prm file
config = new ConfigSlurper().parse(new File('cgp_lane_bam.prm').toURL())
props = config.toProperties()

LSF_JOB_NAME_LBAM=props.LSF_JOB_NAME_LBAM
LSF_Q_LBAM=props.LSF_Q_LBAM
LSF_MEMORY_LBAM=props.LSF_MEMORY_LBAM
LSF_ARRAY_START_LBAM=props.LSF_ARRAY_START_LBAM
LSF_ARRAY_END_LBAM=props.LSF_ARRAY_END_LBAM
LSF_THREADS_LBAM=props.LSF_THREADS_LBAM

//load mismatchqc prm file
config = new ConfigSlurper().parse(new File('cgp_mismatchqc.prm').toURL())
props = config.toProperties()

LSF_JOB_NAME_MISMATCHQC=props.LSF_JOB_NAME
LSF_Q_MISMATCHQC=props.LSF_Q_MISMATCHQC
LSF_MEMORY_MISMATCHQC=props.LSF_MEMORY_MISMATCHQC
LSF_ARRAY_START_MISMATCHQC=props.LSF_ARRAY_START_MISMATCHQC
LSF_ARRAY_END_MISMATCHQC=props.LSF_ARRAY_END_MISMATCHQC
LSF_THREADS_MISMATCHQC=props.LSF_THREADS_MISMATCHQC

LSF_Q_RENAME_BAM=props.LSF_Q_RENAME_BAM
LSF_MEMORY_RENAME_BAM=props.LSF_MEMORY_RENAME_BAM

//load biobambam prm file
config = new ConfigSlurper().parse(new File('cgp_biobambam.prm').toURL())
props = config.toProperties()

LSF_JOB_NAME_BIOBAMBAM=props.LSF_JOB_NAME
LSF_Q=props.LSF_Q
LSF_MEMORY=props.LSF_MEMORY
LSF_ARRAY_START=props.LSF_ARRAY_START
LSF_ARRAY_END=props.LSF_ARRAY_END

LSF_Q_BAMCOLLATE2=props.LSF_Q_BAMCOLLATE2
LSF_MEMORY_BAMCOLLATE2=props.LSF_MEMORY_BAMCOLLATE2
LSF_ARRAY_START_BAMCOLLATE2=props.LSF_ARRAY_START_BAMCOLLATE2
LSF_ARRAY_END_BAMCOLLATE2=props.LSF_ARRAY_END_BAMCOLLATE2
LSF_THREADS_BAMCOLLATE2=props.LSF_THREADS_BAMCOLLATE2

//load bamstats prm file
config = new ConfigSlurper().parse(new File('cgp_bamstats.prm').toURL())
props = config.toProperties()

LSF_JOB_NAME_BAMSTATS=props.LSF_JOB_NAME
LSF_Q_BAMSTATS=props.LSF_Q_BAMSTATS
LSF_MEMORY_BAMSTATS=props.LSF_MEMORY_BAMSTATS
LSF_ARRAY_START_BAMSTATS=props.LSF_ARRAY_START_BAMSTATS
LSF_ARRAY_END_BAMSTATS=props.LSF_ARRAY_END_BAMSTATS
LSF_THREADS_BAMSTATS=props.LSF_THREADS_BAMSTATS

//load bamstats prm file
config = new ConfigSlurper().parse(new File('cgp_allele_count.prm').toURL())
props = config.toProperties()
LSF_JOB_NAME_ALLELE_COUNT=props.LSF_JOB_NAME

LSF_Q_ALLELE_COUNT_GENOTYPE=props.LSF_Q_ALLELE_COUNT_GENOTYPE
LSF_MEMORY_ALLELE_COUNT_GENOTYPE=props.LSF_MEMORY_ALLELE_COUNT_GENOTYPE
LSF_ARRAY_START_ALLELE_COUNT_GENOTYPE=props.LSF_ARRAY_START_ALLELE_COUNT_GENOTYPE
LSF_ARRAY_END_ALLELE_COUNT_GENOTYPE=props.LSF_ARRAY_END_ALLELE_COUNT_GENOTYPE
LSF_THREADS_ALLELE_COUNT_GENOTYPE=props.LSF_THREADS_ALLELE_COUNT_GENOTYPE

//load cgp_reheadcram config
config = new ConfigSlurper().parse(new File('cgp_reheadcram.prm').toURL())
props = config.toProperties()
LSF_JOB_NAME_REHEADCRAM=props.LSF_JOB_NAME

//assign values to parameters
LSF_MEMORY_REHEADCRAM=props.LSF_MEMORY_REHEADCRAM
LSF_Q_REHEADCRAM=props.LSF_Q_REHEADCRAM

//load resultloader config
config = new ConfigSlurper().parse(new File('cgp_resultloader.prm').toURL())
props = config.toProperties()
LSF_Q_RESULT=props.LSF_Q_RESULT
LSF_MEMORY_RESULT=props.LSF_MEMORY_RESULT
LSF_RESULT_ARRAY_START=props.LSF_RESULT_ARRAY_START
LSF_RESULT_ARRAY_END=props.LSF_RESULT_ARRAY_END
LSF_RESULT_JOB_NAME=props.LSF_RESULT_JOB_NAME
LSF_RESULT_THREADS=props.LSF_RESULT_THREADS
LSF_RESULT_PRIORITY=props.LSF_RESULT_PRIORITY
LSF_RESULT_NFS_TOKEN=props.LSF_RESULT_NFS_TOKEN

def JOBID = System.getenv('LSB_JOBID');

executor="lsf"

//default LSF values
lsf_request_options=" -P default_settings -q $LSF_Q -R'select[mem>$LSF_MEMORY]  span[hosts=1] rusage[mem=$LSF_MEMORY]' -M$LSF_MEMORY -oo ${LSF_JOB_NAME}_default.%I.canPipe.log -J ${LSF_JOB_NAME}_default_${JOBID}'[$LSF_ARRAY_START-$LSF_ARRAY_END]'"

commands {
  lsf_streamrg {
    procs="$LSF_THREADS_LBAM"
    lsf_request_options=" -P analysis-cgp  -q $LSF_Q_LBAM -R'select[mem>=$LSF_MEMORY_LBAM] span[hosts=1] rusage[mem=$LSF_MEMORY_LBAM]' -M$LSF_MEMORY_LBAM -oo ${LSF_JOB_NAME_LBAM}.%I.canPipe.log -J ${LSF_JOB_NAME_LBAM}_LBAM_${JOBID}'[$LSF_ARRAY_START_LBAM-$LSF_ARRAY_END_LBAM]'"
  }
  lsf_MISMATCHQC {
		procs="$LSF_THREADS_MISMATCHQC"
	    lsf_request_options=" -P analysis-cgp -q $LSF_Q_MISMATCHQC -R'select[mem>$LSF_MEMORY_MISMATCHQC]  span[hosts=1] rusage[mem=$LSF_MEMORY_MISMATCHQC]' -M$LSF_MEMORY_MISMATCHQC -oo ${LSF_JOB_NAME_MISMATCHQC}_MISMATCHQC.%I.canPipe.log -J ${LSF_JOB_NAME_MISMATCHQC}_MISMATCHQC_${JOBID}'[$LSF_ARRAY_START_MISMATCHQC-$LSF_ARRAY_END_MISMATCHQC]'"
	}
  lsf_RENAME_BAM {
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_RENAME_BAM -R'select[mem>$LSF_MEMORY_RENAME_BAM] span[hosts=1] rusage[mem=$LSF_MEMORY_RENAME_BAM]' -M$LSF_MEMORY_RENAME_BAM -oo ${LSF_JOB_NAME_MISMATCHQC}_RENAME_BAM.%I.canPipe.log -J ${LSF_JOB_NAME_MISMATCHQC}_RENAME_BAM_${JOBID}'[1]'"
	}
    lsf_BAMCOLLATE2 {
    	    procs="$LSF_THREADS_BAMCOLLATE2"
	    lsf_request_options=" -P analysis-cgp -q $LSF_Q_BAMCOLLATE2 -R'select[mem>$LSF_MEMORY_BAMCOLLATE2]  span[hosts=1] rusage[mem=$LSF_MEMORY_BAMCOLLATE2]' -M$LSF_MEMORY_BAMCOLLATE2 -oo ${LSF_JOB_NAME_BIOBAMBAM}_BAMCOLLATE2.%I.canPipe.log -J ${LSF_JOB_NAME_BIOBAMBAM}_BAMCOLLATE2_${JOBID}'[$LSF_ARRAY_START_BAMCOLLATE2-$LSF_ARRAY_END_BAMCOLLATE2]'"
    }

    lsf_BAMSTATS {
            procs="$LSF_THREADS_BAMSTATS"
	    lsf_request_options=" -P analysis-cgp -q $LSF_Q_BAMSTATS -R'select[mem>$LSF_MEMORY_BAMSTATS] span[hosts=1] rusage[mem=$LSF_MEMORY_BAMSTATS]' -M$LSF_MEMORY_BAMSTATS -oo ${LSF_JOB_NAME_BAMSTATS}_BAMSTATS.%I.canPipe.log -J ${LSF_JOB_NAME_BAMSTATS}_BAMSTATS_${JOBID}'[$LSF_ARRAY_START_BAMSTATS-$LSF_ARRAY_END_BAMSTATS]'"
    }

    lsf_ALLELE_COUNT_GENOTYPE {
      	    procs="$LSF_THREADS_ALLELE_COUNT_GENOTYPE"
            lsf_request_options=" -P analysis-cgp -q $LSF_Q_ALLELE_COUNT_GENOTYPE -R'select[mem>$LSF_MEMORY_ALLELE_COUNT_GENOTYPE] rusage[mem=$LSF_MEMORY_ALLELE_COUNT_GENOTYPE]' -M$LSF_MEMORY_ALLELE_COUNT_GENOTYPE -oo ${LSF_JOB_NAME_ALLELE_COUNT}_ALLELE_COUNT_GENOTYPE.%I.canPipe.log -J ${LSF_JOB_NAME_ALLELE_COUNT}_ALLELE_COUNT_GENOTYPE_${JOBID}'[$LSF_ARRAY_START_ALLELE_COUNT_GENOTYPE-$LSF_ARRAY_END_ALLELE_COUNT_GENOTYPE]'"
    }
	lsf_reheadcram_newhead {
		lsf_request_options=" -P analysis-cgp -q $LSF_Q_REHEADCRAM -R'select[mem>=$LSF_MEMORY_REHEADCRAM] rusage[mem=$LSF_MEMORY_REHEADCRAM]' -M$LSF_MEMORY_REHEADCRAM -oo ${LSF_JOB_NAME_REHEADCRAM}_reheadcram.%I.canPipe.log -J ${LSF_JOB_NAME_REHEADCRAM}_REHEADCRAM_${JOBID}"
	}
	lsf_loadresults {
    procs="$LSF_RESULT_THREADS"
		lsf_request_options="  -P analysis-cgp -q $LSF_Q_RESULT -sp $LSF_RESULT_PRIORITY -R'select[casm_cgpirods>=$LSF_RESULT_NFS_TOKEN && mem>$LSF_MEMORY_RESULT] order[!slots] span[hosts=1] rusage[casm_cgpirods=$LSF_RESULT_NFS_TOKEN]' -R'rusage[mem=$LSF_MEMORY_RESULT]' -M$LSF_MEMORY_RESULT -oo resultloader.%I.canPipe.log -J ${LSF_RESULT_JOB_NAME}_RESULT_${JOBID}'[$LSF_RESULT_ARRAY_START-$LSF_RESULT_ARRAY_END]'"
	}
}
